---
description: |
  Implementation of data storage that uses RAM, providing fast access
  but volatile storage with configurable decay characteristics.

objective: |
  To provide fast, temporary data storage with biologically-inspired
  decay and consolidation mechanisms for efficient memory management.

biological_analogy: |
  Functions like short-term memory in neural circuits, maintaining information
  through persistent activity patterns with rapid access but limited duration.

configuration:
  decay_rate: float         # Rate of memory decay (0.0-1.0)
  persistence_level: float  # Initial memory persistence (0.0-1.0)
  consolidation_rate: float # Rate of memory consolidation (0.0-1.0)
  capacity: int            # Maximum number of items to store

examples:
  - name: "Basic Usage"
    code: |
      memory = ConfigLoader.create("DataUnitMemory",
                                decay_rate=0.05,
                                persistence_level=0.3)
      memory.set("example data")
      data = memory.get()

  - name: "With Consolidation"
    code: |
      memory = ConfigLoader.create("DataUnitMemory",
                                persistence_level=0.2,
                                consolidation_rate=0.1)
      memory.set("important data")
      memory.consolidate()  # Make data more permanent

  - name: "Decay Management"
    code: |
      memory = ConfigLoader.create("DataUnitMemory",
                                decay_rate=0.1,
                                persistence_level=0.5)
      memory.set(1.0)
      memory.decay()  # Apply decay effect

validation:
  required_fields: []
  constraints:
    decay_rate:
      type: float
      min: 0.0
      max: 1.0
    persistence_level:
      type: float
      min: 0.0
      max: 1.0
    consolidation_rate:
      type: float
      min: 0.0
      max: 1.0
    capacity:
      type: int
      min: 1 