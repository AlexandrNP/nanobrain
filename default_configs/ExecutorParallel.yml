---
# Default configuration - all variables assigned
defaults:
  # Class specification
  class: "src.ExecutorParallel.ExecutorParallel"
  
  # Required parameters
  max_workers: 1          # Must be provided, minimum 1

  # Optional parameters with defaults - set for maximum reliability
  queue_size: 1000        # Large queue to prevent overflow
  energy_per_execution: 0.0  # No energy cost
  recovery_rate: 1.0        # Instant energy recovery
  load_threshold: 1.0       # Never triggers load balancing
  reliability_threshold: 0.0 # Always execute
  runnable_types: []        # Accept all types by default

# Metadata and examples
metadata:
  description: |
    Parallel executor implementation that runs multiple tasks concurrently
    with resource management and load balancing.

  objective: |
    To provide efficient parallel execution of tasks while managing system
    resources and maintaining execution reliability.

  biological_analogy: |
    Functions like parallel neural pathways that process information
    simultaneously, similar to parallel processing in sensory systems.

  validation:
    required:
      - class  # Python class to instantiate
      - max_workers
    optional:
      - queue_size
      - energy_per_execution
      - recovery_rate
      - load_threshold
      - reliability_threshold
      - runnable_types
    constraints:
      class:
        type: str
      max_workers:
        type: int
        min: 1
      queue_size:
        type: int
        min: 1
      energy_per_execution:
        type: float
        min: 0.0
        max: 1.0
      recovery_rate:
        type: float
        min: 0.0
        max: 1.0
      load_threshold:
        type: float
        min: 0.0
        max: 1.0
      reliability_threshold:
        type: float
        min: 0.0
        max: 1.0
      runnable_types:
        type: array
        items:
          type: str

examples:
  - name: "Basic Usage"
    code: |
      executor = ConfigLoader.create("ExecutorParallel",
                                  max_workers=4)
      results = await executor.execute_batch(runnables)  # Always executes with default config

  - name: "With Load Management"
    code: |
      executor = ConfigLoader.create("ExecutorParallel",
                                  max_workers=8,
                                  load_threshold=0.8,
                                  queue_size=2000)
      if executor.can_execute(runnable_type):
          result = await executor.execute(runnable)

  - name: "Type-Specific Execution"
    code: |
      executor = ConfigLoader.create("ExecutorParallel",
                                  max_workers=4,
                                  runnable_types=["Processor", "Analyzer"])
      results = await executor.execute_batch(compatible_runnables) 