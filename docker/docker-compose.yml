version: '3.8'

services:
  # ==========================================================================
  # NanoBrain Viral Protein Analysis Application
  # ==========================================================================
  nanobrain-app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: nanobrain-viral-protein-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - NANOBRAIN_ENV=production
      - NANOBRAIN_CONFIG_PATH=/app/config/production_config.yml
      - PYTHONPATH=/app
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - nanobrain-cache:/app/cache
      - ../config:/app/config:ro
    depends_on:
      - redis
      - postgres
    networks:
      - nanobrain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==========================================================================
  # Redis Cache Service
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: nanobrain-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - nanobrain-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # PostgreSQL Database
  # ==========================================================================
  postgres:
    image: postgres:15-alpine
    container_name: nanobrain-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=nanobrain_viral
      - POSTGRES_USER=nanobrain
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-nanobrain_secure_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - nanobrain-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nanobrain -d nanobrain_viral"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # Prometheus Monitoring
  # ==========================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: nanobrain-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - nanobrain-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # ==========================================================================
  # Grafana Dashboard
  # ==========================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: nanobrain-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_secure_password}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - nanobrain-network
    depends_on:
      - prometheus

  # ==========================================================================
  # Nginx Reverse Proxy
  # ==========================================================================
  nginx:
    image: nginx:alpine
    container_name: nanobrain-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ../logs/nginx:/var/log/nginx
    networks:
      - nanobrain-network
    depends_on:
      - nanobrain-app

  # ==========================================================================
  # Development Services
  # ==========================================================================
  nanobrain-dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    container_name: nanobrain-dev
    volumes:
      - ../:/app
      - nanobrain-cache:/app/cache
    environment:
      - NANOBRAIN_ENV=development
      - PYTHONPATH=/app
    ports:
      - "8001:8000"
    networks:
      - nanobrain-network
    profiles:
      - development

  # ==========================================================================
  # Testing Service
  # ==========================================================================
  nanobrain-test:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: testing
    container_name: nanobrain-test
    volumes:
      - ../test-results:/app/htmlcov
    environment:
      - NANOBRAIN_ENV=testing
      - PYTHONPATH=/app
    networks:
      - nanobrain-network
    profiles:
      - testing

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nanobrain-cache:
    driver: local

# =============================================================================
# Networks
# =============================================================================
networks:
  nanobrain-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 