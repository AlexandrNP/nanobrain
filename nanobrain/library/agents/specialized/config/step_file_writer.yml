name: "StepFileWriter"
description: "Step for performing file operations based on natural language descriptions"
class: "Step"  # Uses Step class after mandatory from_config migration

# MANDATORY: Agent card section for A2A protocol compliance
agent_card:
  version: "1.0.0"
  purpose: "Specialized step for file operations based on natural language descriptions"
  detailed_description: "StepFileWriter is a specialized step that integrates FileWriterAgent capabilities to perform file operations through natural language commands, with intelligent parsing and directory management."
  domain: "file_management"
  expertise_level: "intermediate"
  
  input_format:
    primary_mode: "json"
    supported_modes: ["json", "text"]
    content_types: ["application/json", "text/plain"]
    format_schema:
      type: "object"
      required_fields:
        input:
          type: "string"
          description: "Natural language description of file operation to perform"
      optional_fields:
        operation:
          type: "string"
          description: "Specific operation type (write, read, append, modify, delete)"
        path:
          type: "string"
          description: "Target file path"
        content:
          type: "string"
          description: "Content for write operations"
  
  output_format:
    primary_mode: "json"
    supported_modes: ["json", "text"]
    content_types: ["application/json", "text/plain"]
    format_schema:
      type: "object"
      guaranteed_fields:
        result:
          type: "object"
          description: "File operation result with status and details"
        operation_performed:
          type: "string"
          description: "Description of the operation that was performed"
        file_path:
          type: "string"
          description: "Path of the file that was operated on"
  
  capabilities:
    streaming: false
    push_notifications: false
    state_transition_history: false
    multi_turn_conversation: false
    context_retention: false
    tool_usage: true
    delegation: false
    collaboration: false
  
  skills:
    - id: "natural_language_parsing"
      name: "Natural Language File Operation Parsing"
      description: "Parse natural language descriptions to extract file operations, paths, and content"
      complexity: "intermediate"
      input_modes: ["text", "json"]
      output_modes: ["json"]
      examples:
        - "Parse 'Create a config file with database settings' to extract file operation details"
        - "Extract file path and content from 'Save this code to utils.py: def hello(): print(\"Hello\")'"
    
    - id: "file_operations"
      name: "Comprehensive File Operations"
      description: "Perform create, read, write, append, modify, and delete operations on files"
      complexity: "intermediate"
      input_modes: ["json"]
      output_modes: ["json"]
      examples:
        - "Create new files with automatic directory creation"
        - "Read file contents and return formatted results"
        - "Append content to existing files with backup creation"
  
  performance:
    typical_response_time: "1-5 seconds"
    max_response_time: "30 seconds"
    memory_usage: "50-200 MB"
    cpu_requirements: "Low"
    concurrency_support: true
    max_concurrent_sessions: 10
    rate_limit: "100 operations/minute"
    scaling_characteristics: "I/O bound, scales well with concurrent operations"
  
  usage_examples:
    - name: "Create Configuration File"
      description: "Create a configuration file with specific content"
      input_example:
        input: "Create a config.yml file with database host: localhost, port: 5432"
      expected_output:
        result:
          status: "success"
          bytes_written: 45
          backup_created: false
        operation_performed: "Created configuration file with database settings"
        file_path: "config.yml"
    
    - name: "Save Code to File"
      description: "Extract code from description and save to specified file"
      input_example:
        input: "Save this Python function to utils/helpers.py: def greet(name): return f'Hello, {name}!'"
      expected_output:
        result:
          status: "success"
          bytes_written: 62
          directories_created: ["utils"]
        operation_performed: "Saved Python function to file with directory creation"
        file_path: "utils/helpers.py"

defaults:
  backup_enabled: true
  backup_extension: ".bak"
  create_directories: true
  model: "gpt-3.5-turbo"
  debug_mode: false

metadata:
  biological_analogy: "Fine motor control for writing"
  justification: >
    Like how fine motor control allows for precise writing movements,
    this tool allows for precise file writing operations.
  objectives:
    - Parse natural language instructions to extract file operations
    - Create new files with specified content
    - Read existing files with natural instructions
    - Intelligently determine file paths and content from text input
    - Create backups of files before modifying them

config:
  name: "StepFileWriter"
  description: "Step for file operations using specialized FileWriterAgent"
  debug_mode: false

# Agent configuration for the step
agent:
  class: "agents.FileWriterAgent"
  config:
    name: "StepFileWriter"
    description: "Specialized agent for file operations based on natural language descriptions"
    model: "gpt-3.5-turbo"
    temperature: 0.1
    system_prompt: |
      You are a specialized file writing agent for the NanoBrain framework.

      Your responsibilities:
      1. Create and write files based on natural language descriptions
      2. Handle file paths and directory creation
      3. Manage file permissions and error handling
      4. Provide clear feedback about file operations

      When handling file operations:
      - Create directories if they don't exist
      - Handle file permissions appropriately
      - Provide clear error messages
      - Confirm successful operations
      - Support various file formats (text, code, data files)

      You can handle direct file operations without LLM calls for simple tasks.

# Input data configurations
input_configs:
  instruction:
    data_type: "memory"
    name: "instruction"
    description: "Natural language instruction for file operation"
  content:
    data_type: "memory"
    name: "content"
    description: "Content to write to file (optional)"
    required: false

# Output data configuration
output_config:
  data_type: "file"
  name: "result"
  description: "Result of the file operation"

validation:
  required:
    - name
    - description
  optional:
    - debug_mode
    - backup_enabled
    - backup_extension
    - create_directories
  constraints:
    debug_mode:
      type: "boolean"
      description: "Enable debug mode for verbose logging."
    backup_enabled:
      type: "boolean"
      description: "Whether to create backups by default."
    backup_extension:
      type: "string"
      description: "Extension to use for backup files."
      pattern: "^\\.[a-zA-Z0-9]+$"
    create_directories:
      type: "boolean"
      description: "Whether to create parent directories if they don't exist."

input_schema:
  type: "object"
  properties:
    input:
      type: "string"
      description: "Natural language description of the file operation to perform"
      required: false
    operation:
      type: "string"
      description: "Operation to perform (write, read, append, modify, delete, backup)"
      enum: ["write", "read", "append", "modify", "delete", "backup"]
      required: false
    path:
      type: "string"
      description: "Path to the file to operate on"
      required: false
    content:
      type: "string"
      description: "Content to write to the file (for write, append, and modify operations)"
      required: false
    backup:
      type: "boolean"
      description: "Whether to create a backup before modifying/deleting a file"
      default: true
      required: false
    create_dirs:
      type: "boolean"
      description: "Whether to create parent directories when writing files"
      default: true
      required: false

examples:
  write_file:
    description: "Write content to a new file"
    input: "Create a file called 'hello.txt' with the content 'Hello, World!'"
    
  write_code_file:
    description: "Write code to a file"
    input: "Save this Python code to 'calculator.py': def add(a, b): return a + b"
    
  read_file:
    description: "Read a file"
    input: "Read the contents of 'config.json'"
    
  append_to_file:
    description: "Append content to an existing file"
    input: "Add 'New line of text' to the end of 'log.txt'"
    
  structured_operation:
    description: "Structured file operation"
    config:
      operation: "write"
      path: "data/output.txt"
      content: "Structured content"
      create_dirs: true
      backup: false 