name: "query_classification"
description: "Classify user queries and extract virus species using LLM agent"

# Agent configuration with class+config pattern (TOP LEVEL for proper resolution)
extraction_agent:
  class: "nanobrain.library.agents.specialized.virus_extraction_agent.VirusExtractionAgent"
  config: "config/QueryClassificationStep/VirusExtractionAgent.yml"

# Step configuration
config:
  name: "query_classification"
  description: "Classify user queries using LLM agent"
  debug_mode: false
  enable_logging: true
  log_data_transfers: true

# Input/Output data unit specifications (UPDATED: dictionary format)
input_data_units:
  user_query:
    class: "nanobrain.core.data_unit.DataUnitMemory"
    config:
      class: "nanobrain.core.data_unit.DataUnitMemory"
      name: "user_query"
      description: "User query input"
      persistent: false

output_data_units:
  extraction_result:
    class: "nanobrain.core.data_unit.DataUnitMemory" 
    config:
      class: "nanobrain.core.data_unit.DataUnitMemory"
      name: "extraction_result"
      description: "Virus extraction result"
      persistent: false

# Step timeout and retry settings (existing)
timeout: 30.0
max_retries: 3
retry_delay: 1.0

# ✅ SCOPE CORRECTED: Step-level trigger referencing step-level data unit
triggers:
  - trigger_id: "query_classification_completed"
    class: "nanobrain.core.trigger.DataUnitChangeTrigger"
    config:
      data_unit: "extraction_result"  # ✅ STEP-LEVEL REFERENCE: References step's output data unit
      event_type: "set"
      description: "Trigger when query classification completed"
      enable_logging: true

# Classification configuration (existing)
classification_config:
  confidence_threshold: 0.7
  enable_fallback_routing: true
  routing_strategies:
    virus_detection: "high_confidence_routing"
    analysis_detection: "context_aware_routing" 