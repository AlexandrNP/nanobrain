# Elasticsearch Integration Configuration for Chatbot Viral Integration Workflow
# This configuration demonstrates how to integrate Elasticsearch as a standalone service
# accessible via MCP server for enhanced search and analytics capabilities

workflow_name: "chatbot_viral_integration_with_elasticsearch"
description: "Enhanced chatbot workflow with Elasticsearch search integration"
version: "2.0.0"

# MCP Configuration for Elasticsearch
mcp_servers:
  elasticsearch:
    name: "elasticsearch"
    url: "http://elasticsearch-mcp:9202"
    description: "Elasticsearch MCP server for viral protein search and analytics"
    auth_type: "none"
    timeout: 30.0
    max_retries: 3
    retry_delay: 1.0
    enabled: true
    capabilities: ["tools", "search", "analytics"]

# Elasticsearch Service Configuration
elasticsearch_service:
  # Docker service configuration
  docker:
    enabled: true
    service_name: "nanobrain-elasticsearch"
    auto_start: true
    health_check_timeout: 120
  
  # Connection settings
  connection:
    host: "elasticsearch"
    port: 9200
    scheme: "http"
    timeout: 30
  
  # Index configuration for viral data
  indices:
    viral_proteins:
      name: "viral_proteins"
      settings:
        number_of_shards: 1
        number_of_replicas: 0
        refresh_interval: "1s"
      mappings:
        properties:
          protein_id:
            type: "keyword"
          sequence:
            type: "text"
            analyzer: "standard"
          organism:
            type: "keyword"
          function:
            type: "text"
            analyzer: "standard"
          embedding:
            type: "dense_vector"
            dims: 384
          metadata:
            class: nanobrain.core.data_unit.DataUnit
            enabled: true
    
    analysis_results:
      name: "analysis_results"
      settings:
        number_of_shards: 1
        number_of_replicas: 0
      mappings:
        properties:
          analysis_id:
            type: "keyword"
          timestamp:
            type: "date"
          results:
            class: nanobrain.core.data_unit.DataUnit
            enabled: true
          protein_ids:
            type: "keyword"
          confidence_score:
            type: "float"
    
    chat_interactions:
      name: "chat_interactions"
      settings:
        number_of_shards: 1
        number_of_replicas: 0
      mappings:
        properties:
          interaction_id:
            type: "keyword"
          timestamp:
            type: "date"
          query:
            type: "text"
            analyzer: "standard"
          response:
            type: "text"
            analyzer: "standard"
          intent:
            class: nanobrain.core.data_unit.DataUnit
            enabled: true
          context_used:
            type: "boolean"

# Enhanced Workflow Steps with Elasticsearch Integration
workflow_steps:
  # Step 1: Query Classification (existing)
  - name: "query_classification"
    class: "QueryClassificationStep"
    config:
      step_name: "query_classification"
      intent_categories:
        - "viral_protein_search"
        - "sequence_analysis"
        - "organism_inquiry"
        - "function_analysis"
        - "general_chat"
      confidence_threshold: 0.7
  
  # Step 2: Elasticsearch Search (NEW)
  - name: "elasticsearch_search"
    class: "ElasticsearchSearchStep"
    config:
      step_name: "elasticsearch_search"
      mcp_server_url: "http://elasticsearch-mcp:9202"
      mcp_server_name: "elasticsearch"
      search_indices: ["viral_proteins", "analysis_results", "chat_interactions"]
      enable_semantic_search: true
      enable_hybrid_search: true
      max_results: 10
      min_score_threshold: 0.1
      include_related_proteins: true
      include_analysis_context: true
      enable_caching: true
      cache_ttl: 300
    dependencies:
      - "query_classification"
    conditions:
      - intent_category: ["viral_protein_search", "sequence_analysis", "organism_inquiry"]
  
  # Step 3: BV-BRC Data Acquisition (existing, enhanced with indexing)
  - name: "bv_brc_acquisition"
    class: "BVBRCDataAcquisitionStep"
    config:
      step_name: "bv_brc_acquisition"
      virus_name_resolution: true
      enable_caching: true
      progressive_scaling: true
      # NEW: Auto-index acquired data
      auto_index_results: true
      elasticsearch_indexing:
        enabled: true
        index_name: "viral_proteins"
        bulk_size: 100
    dependencies:
      - "query_classification"
    conditions:
      - intent_category: ["viral_protein_search", "sequence_analysis"]
      - search_results_insufficient: true  # Only if search didn't find enough data
  
  # Step 4: Elasticsearch Indexing (NEW)
  - name: "elasticsearch_indexing"
    class: "ElasticsearchIndexingStep"
    config:
      step_name: "elasticsearch_indexing"
      mcp_server_url: "http://elasticsearch-mcp:9202"
      mcp_server_name: "elasticsearch"
      indices:
        proteins: "viral_proteins"
        results: "analysis_results"
        interactions: "chat_interactions"
      bulk_size: 100
      enable_embeddings: true
      embedding_model: "sentence-transformers/all-MiniLM-L6-v2"
      include_metadata: true
    dependencies:
      - "bv_brc_acquisition"
    conditions:
      - has_new_data: true
  
  # Step 5: Viral Analysis (existing)
  - name: "viral_analysis"
    class: "ViralProteinAnalysisStep"
    config:
      step_name: "viral_analysis"
      analysis_types: ["sequence", "function", "structure"]
      confidence_threshold: 0.8
    dependencies:
      - "bv_brc_acquisition"
      - "elasticsearch_search"
    conditions:
      - intent_category: ["sequence_analysis", "function_analysis"]
  
  # Step 6: Response Generation (enhanced with search context)
  - name: "response_generation"
    class: "ConversationalResponseStep"
    config:
      step_name: "response_generation"
      # NEW: Use search results to enhance responses
      use_search_context: true
      max_context_items: 5
      context_relevance_threshold: 0.5
      response_templates:
        with_search_results: "Based on the search results, I found {result_count} relevant proteins..."
        with_analysis: "The analysis shows..."
        general: "I can help you with viral protein information..."
    dependencies:
      - "elasticsearch_search"
      - "viral_analysis"

# Integration Points Configuration
integration_points:
  # Data flow from BV-BRC to Elasticsearch
  data_indexing:
    source: "bv_brc_acquisition"
    target: "elasticsearch_indexing"
    data_types: ["protein_sequences", "metadata", "analysis_results"]
    transformation: "standardize_protein_format"
  
  # Search enhancement for responses
  search_enhancement:
    source: "elasticsearch_search"
    target: "response_generation"
    data_types: ["search_results", "related_proteins", "analysis_context"]
    enhancement_type: "contextual_enrichment"
  
  # Analytics and monitoring
  analytics:
    source: "chat_interactions"
    target: "elasticsearch_indexing"
    data_types: ["user_queries", "response_feedback", "interaction_metadata"]
    purpose: "usage_analytics"

# Performance and Monitoring Configuration
monitoring:
  # Elasticsearch health monitoring
  elasticsearch_health:
    enabled: true
    check_interval: 60  # seconds
    metrics:
      - "cluster_health"
      - "index_status"
      - "search_performance"
      - "indexing_rate"
  
  # MCP server monitoring
  mcp_server_health:
    enabled: true
    check_interval: 30  # seconds
    metrics:
      - "connection_status"
      - "request_latency"
      - "error_rate"
      - "active_connections"
  
  # Workflow performance
  workflow_metrics:
    enabled: true
    track_metrics:
      - "search_response_time"
      - "indexing_throughput"
      - "cache_hit_rate"
      - "context_relevance_score"

# Environment-specific configurations
environments:
  development:
    elasticsearch_service:
      docker:
        memory_limit: "1GB"
        cpu_limit: "1.0"
      indices:
        viral_proteins:
          settings:
            refresh_interval: "5s"
    
    mcp_servers:
      elasticsearch:
        timeout: 60.0
        max_retries: 5
  
  production:
    elasticsearch_service:
      docker:
        memory_limit: "4GB"
        cpu_limit: "2.0"
      indices:
        viral_proteins:
          settings:
            number_of_replicas: 1
            refresh_interval: "30s"
    
    mcp_servers:
      elasticsearch:
        timeout: 30.0
        max_retries: 3
    
    monitoring:
      elasticsearch_health:
        check_interval: 30
      alerts:
        enabled: true
        thresholds:
          search_latency: 1000  # ms
          indexing_errors: 5    # per minute
          disk_usage: 85        # percent

# Usage Examples
usage_examples:
  - name: "basic_protein_search"
    description: "User searches for CHIKV proteins"
    user_query: "Show me CHIKV envelope proteins"
    expected_flow:
      - "query_classification -> viral_protein_search"
      - "elasticsearch_search -> finds indexed CHIKV proteins"
      - "response_generation -> enhanced with search context"
    
  - name: "new_organism_analysis"
    description: "User asks about organism not yet indexed"
    user_query: "Tell me about Zika virus proteins"
    expected_flow:
      - "query_classification -> viral_protein_search"
      - "elasticsearch_search -> limited results"
      - "bv_brc_acquisition -> fetch Zika data"
      - "elasticsearch_indexing -> index new data"
      - "response_generation -> comprehensive answer"
  
  - name: "contextual_follow_up"
    description: "User asks follow-up question"
    user_query: "What about their function?"
    expected_flow:
      - "query_classification -> function_analysis"
      - "elasticsearch_search -> use interaction history"
      - "response_generation -> context-aware answer"

# Deployment Configuration
deployment:
  docker_compose:
    file: "docker-compose.elasticsearch.yml"
    services:
      - "elasticsearch"
      - "elasticsearch-mcp-server"
      - "kibana"  # optional
    
    startup_order:
      1: ["elasticsearch"]
      2: ["elasticsearch-mcp-server"]
      3: ["chatbot-backend", "chatbot-frontend"]
    
    health_checks:
      elasticsearch: "/_cluster/health"
      mcp_server: "/health"
  
  kubernetes:
    enabled: false  # Future implementation
    namespace: "nanobrain"
    resources:
      elasticsearch:
        requests:
          memory: "2Gi"
          cpu: "1"
        limits:
          memory: "4Gi"
          cpu: "2" 