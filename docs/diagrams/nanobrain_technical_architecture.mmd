graph TB
    subgraph "NanoBrain Framework - Current Architecture"
        subgraph "Application Layer"
            CLI["🖥️ CLI Interface<br/>- Interactive chat<br/>- Command processing<br/>- User interaction"]
            Demo["🎯 Demo Applications<br/>- Parsl Chat Workflow<br/>- Performance testing<br/>- Load balancing"]
            API["🔌 Python API<br/>- Programmatic access<br/>- Integration support<br/>- Custom workflows"]
        end

        subgraph "Core Framework Layer"
            subgraph "Agent System"
                Agent["🤖 ConversationalAgent<br/>- LLM integration<br/>- Message processing<br/>- Response generation"]
                AgentConfig["⚙️ AgentConfig<br/>- Model configuration<br/>- System prompts<br/>- Parameters"]
            end

            subgraph "Execution Engine"
                LocalExec["💻 LocalExecutor<br/>- Single-threaded<br/>- Simple tasks<br/>- Development"]
                ThreadExec["🧵 ThreadExecutor<br/>- Multi-threaded<br/>- I/O bound tasks<br/>- Concurrent processing"]
                ProcessExec["⚙️ ProcessExecutor<br/>- Multi-process<br/>- CPU intensive<br/>- Isolation"]
                ParslExec["🚀 ParslExecutor<br/>- HPC integration<br/>- Distributed computing<br/>- Scalable execution"]
            end

            subgraph "Data Management"
                DataBase["📦 DataUnitBase<br/>- Abstract interface<br/>- Operation logging<br/>- Content tracking"]
                DataMem["💾 DataUnitMemory<br/>- In-memory storage<br/>- Fast access<br/>- Temporary data"]
                DataFile["📁 DataUnitFile<br/>- Persistent storage<br/>- File operations<br/>- Long-term data"]
            end

            subgraph "Workflow Engine"
                Step["🔄 Step<br/>- Processing units<br/>- Input/output handling<br/>- Execution logic"]
                Link["🔗 Link<br/>- Data connections<br/>- Flow control<br/>- Dependency management"]
                Trigger["⚡ Trigger<br/>- Event handling<br/>- Condition monitoring<br/>- Workflow activation"]
            end
        end

        subgraph "Configuration & Schema Layer"
            subgraph "Configuration System"
                YAMLConfig["📄 YAML Configuration<br/>- Human-readable<br/>- Hierarchical structure<br/>- Environment support"]
                ConfigManager["🔧 Configuration Manager<br/>- Loading & validation<br/>- Environment handling<br/>- API key management"]
            end

            subgraph "Schema & Validation"
                PydanticModels["📋 Pydantic V2 Models<br/>- Type safety<br/>- Validation rules<br/>- Serialization"]
                SchemaGen["🏗️ Schema Generator<br/>- Dynamic generation<br/>- JSON schema output<br/>- Documentation"]
                Validator["✅ Schema Validator<br/>- Input validation<br/>- Error handling<br/>- Type checking"]
            end
        end

        subgraph "Logging & Monitoring Layer"
            subgraph "Core Logging"
                Logger["📝 NanoBrainLogger<br/>- Structured logging<br/>- JSON formatting<br/>- Rich metadata"]
                LogConfig["🔧 Logging Configuration<br/>- Mode selection<br/>- Handler management<br/>- Dynamic reconfiguration"]
            end

            subgraph "Specialized Logging"
                DataLog["📊 Data Unit Logging<br/>- Operation tracking<br/>- Content serialization<br/>- Performance metrics"]
                ThirdPartySuppress["🔇 Third-party Suppression<br/>- Console filtering<br/>- Library log control<br/>- Clean output"]
            end
        end

        subgraph "External Integration Layer"
            subgraph "LLM Providers"
                OpenAI["🧠 OpenAI<br/>- GPT models<br/>- Chat completion<br/>- API integration"]
                MockLLM["🎭 Mock LLM<br/>- Testing support<br/>- Development mode<br/>- Offline operation"]
            end

            subgraph "HPC & Distributed Computing"
                Parsl["🌐 Parsl Framework<br/>- HPC execution<br/>- Resource management<br/>- Scalable computing"]
                LocalProvider["💻 Local Provider<br/>- Single machine<br/>- Development testing<br/>- Small workloads"]
                SlurmProvider["🏢 Slurm Provider<br/>- HPC clusters<br/>- Job scheduling<br/>- Large-scale execution"]
            end
        end

        subgraph "Testing & Quality Assurance"
            UnitTests["🧪 Unit Tests<br/>- Component testing<br/>- Isolated validation<br/>- Fast feedback"]
            IntegrationTests["🔬 Integration Tests<br/>- End-to-end testing<br/>- System validation<br/>- Real scenarios"]
            PerformanceTests["⚡ Performance Tests<br/>- Load testing<br/>- Scalability validation<br/>- Benchmark comparison"]
        end
    end

    %% Data Flow Connections
    CLI --> Agent
    Demo --> Agent
    API --> Agent
    
    Agent --> LocalExec
    Agent --> ThreadExec
    Agent --> ProcessExec
    Agent --> ParslExec
    
    Agent --> DataMem
    Agent --> DataFile
    
    Step --> Agent
    Link --> DataBase
    Trigger --> Step
    
    YAMLConfig --> ConfigManager
    ConfigManager --> PydanticModels
    PydanticModels --> Validator
    SchemaGen --> PydanticModels
    
    Logger --> LogConfig
    DataLog --> Logger
    ThirdPartySuppress --> LogConfig
    
    Agent --> OpenAI
    Agent --> MockLLM
    
    ParslExec --> Parsl
    Parsl --> LocalProvider
    Parsl --> SlurmProvider
    
    %% Configuration flows
    ConfigManager --> Agent
    ConfigManager --> LocalExec
    ConfigManager --> ThreadExec
    ConfigManager --> ProcessExec
    ConfigManager --> ParslExec
    
    %% Logging flows
    Logger --> Agent
    Logger --> LocalExec
    Logger --> ThreadExec
    Logger --> ProcessExec
    Logger --> ParslExec
    DataLog --> DataBase
    
    %% Testing connections
    UnitTests --> Agent
    UnitTests --> LocalExec
    UnitTests --> DataBase
    UnitTests --> Logger
    IntegrationTests --> Demo
    IntegrationTests --> CLI
    PerformanceTests --> ParslExec

    %% Styling
    classDef application fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
    classDef core fill:#e3f2fd,stroke:#1565c0,stroke-width:2px
    classDef config fill:#fff3e0,stroke:#ef6c00,stroke-width:2px
    classDef logging fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
    classDef external fill:#fce4ec,stroke:#c2185b,stroke-width:2px
    classDef testing fill:#fff8e1,stroke:#f57f17,stroke-width:2px
    
    class CLI,Demo,API application
    class Agent,AgentConfig,LocalExec,ThreadExec,ProcessExec,ParslExec,DataBase,DataMem,DataFile,Step,Link,Trigger core
    class YAMLConfig,ConfigManager,PydanticModels,SchemaGen,Validator config
    class Logger,LogConfig,DataLog,ThirdPartySuppress logging
    class OpenAI,MockLLM,Parsl,LocalProvider,SlurmProvider external
    class UnitTests,IntegrationTests,PerformanceTests testing 