<!-- NanoBrain Framework - Technical Architecture -->
<!-- Clean, readable SVG diagram showing the detailed technical architecture -->
<!-- For Mermaid source code, see nanobrain_technical_architecture.mmd -->

<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1800 1400" style="background: white;">
    <defs>
        <style>
            .title {
                font-family: Arial, sans-serif;
                font-size: 20px;
                font-weight: bold;
                text-anchor: middle;
                fill: #333;
            }

            .layer-title {
                font-family: Arial, sans-serif;
                font-size: 16px;
                font-weight: bold;
                text-anchor: middle;
                fill: #333;
            }

            .group-title {
                font-family: Arial, sans-serif;
                font-size: 12px;
                font-weight: bold;
                text-anchor: middle;
                fill: #333;
            }

            .component {
                font-family: Arial, sans-serif;
                font-size: 10px;
                text-anchor: middle;
                fill: #333;
            }

            .application {
                fill: #e8f5e8;
                stroke: #2e7d32;
                stroke-width: 2;
            }

            .core {
                fill: #e3f2fd;
                stroke: #1565c0;
                stroke-width: 2;
            }

            .config {
                fill: #fff3e0;
                stroke: #ef6c00;
                stroke-width: 2;
            }

            .logging {
                fill: #f3e5f5;
                stroke: #7b1fa2;
                stroke-width: 2;
            }

            .external {
                fill: #fce4ec;
                stroke: #c2185b;
                stroke-width: 2;
            }

            .testing {
                fill: #fff8e1;
                stroke: #f57f17;
                stroke-width: 2;
            }

            .arrow {
                stroke: #666;
                stroke-width: 1.5;
                fill: none;
                marker-end: url(#arrowhead);
            }
        </style>
        <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
            <polygon points="0 0, 10 3.5, 0 7" fill="#666" />
        </marker>
    </defs>

    <!-- Title -->
    <text x="900" y="30" class="title">🏗️ NanoBrain Framework - Technical Architecture</text>

    <!-- Application Layer -->
    <rect x="50" y="70" width="1700" height="120" class="application" rx="10" />
    <text x="900" y="90" class="layer-title">Application Layer</text>

    <rect x="100" y="110" width="200" height="60" fill="white" stroke="#2e7d32" rx="5" />
    <text x="200" y="130" class="group-title">🖥️ CLI Interface</text>
    <text x="200" y="145" class="component">Interactive chat</text>
    <text x="200" y="160" class="component">Command processing</text>

    <rect x="350" y="110" width="200" height="60" fill="white" stroke="#2e7d32" rx="5" />
    <text x="450" y="130" class="group-title">🎯 Demo Applications</text>
    <text x="450" y="145" class="component">Parsl Chat Workflow</text>
    <text x="450" y="160" class="component">Performance testing</text>

    <rect x="600" y="110" width="200" height="60" fill="white" stroke="#2e7d32" rx="5" />
    <text x="700" y="130" class="group-title">🔌 Python API</text>
    <text x="700" y="145" class="component">Programmatic access</text>
    <text x="700" y="160" class="component">Custom workflows</text>

    <!-- Core Framework Layer -->
    <rect x="50" y="220" width="1700" height="300" class="core" rx="10" />
    <text x="900" y="240" class="layer-title">Core Framework Layer</text>

    <!-- Agent System -->
    <rect x="100" y="260" width="180" height="120" fill="white" stroke="#1565c0" rx="5" />
    <text x="190" y="280" class="group-title">Agent System</text>
    <rect x="110" y="290" width="160" height="35" fill="#e3f2fd" stroke="#1565c0" rx="3" />
    <text x="190" y="305" class="component">🤖 ConversationalAgent</text>
    <text x="190" y="318" class="component">LLM integration</text>
    <rect x="110" y="335" width="160" height="35" fill="#e3f2fd" stroke="#1565c0" rx="3" />
    <text x="190" y="350" class="component">⚙️ AgentConfig</text>
    <text x="190" y="363" class="component">Model configuration</text>

    <!-- Execution Engine -->
    <rect x="300" y="260" width="280" height="120" fill="white" stroke="#1565c0" rx="5" />
    <text x="440" y="280" class="group-title">Execution Engine</text>
    <rect x="310" y="290" width="60" height="35" fill="#e3f2fd" stroke="#1565c0" rx="3" />
    <text x="340" y="305" class="component">💻 Local</text>
    <text x="340" y="318" class="component">Executor</text>
    <rect x="380" y="290" width="60" height="35" fill="#e3f2fd" stroke="#1565c0" rx="3" />
    <text x="410" y="305" class="component">🧵 Thread</text>
    <text x="410" y="318" class="component">Executor</text>
    <rect x="450" y="290" width="60" height="35" fill="#e3f2fd" stroke="#1565c0" rx="3" />
    <text x="480" y="305" class="component">⚙️ Process</text>
    <text x="480" y="318" class="component">Executor</text>
    <rect x="520" y="290" width="60" height="35" fill="#e3f2fd" stroke="#1565c0" rx="3" />
    <text x="550" y="305" class="component">🚀 Parsl</text>
    <text x="550" y="318" class="component">Executor</text>

    <!-- Data Management -->
    <rect x="600" y="260" width="200" height="120" fill="white" stroke="#1565c0" rx="5" />
    <text x="700" y="280" class="group-title">Data Management</text>
    <rect x="610" y="290" width="180" height="25" fill="#e3f2fd" stroke="#1565c0" rx="3" />
    <text x="700" y="305" class="component">📦 DataUnitBase - Abstract interface</text>
    <rect x="610" y="320" width="85" height="25" fill="#e3f2fd" stroke="#1565c0" rx="3" />
    <text x="652" y="335" class="component">💾 Memory</text>
    <rect x="705" y="320" width="85" height="25" fill="#e3f2fd" stroke="#1565c0" rx="3" />
    <text x="747" y="335" class="component">📁 File</text>
    <rect x="610" y="350" width="180" height="25" fill="#e3f2fd" stroke="#1565c0" rx="3" />
    <text x="700" y="365" class="component">📝 Content Logging</text>

    <!-- Workflow Engine -->
    <rect x="820" y="260" width="200" height="120" fill="white" stroke="#1565c0" rx="5" />
    <text x="920" y="280" class="group-title">Workflow Engine</text>
    <rect x="830" y="290" width="180" height="25" fill="#e3f2fd" stroke="#1565c0" rx="3" />
    <text x="920" y="305" class="component">🔄 Step - Processing units</text>
    <rect x="830" y="320" width="180" height="25" fill="#e3f2fd" stroke="#1565c0" rx="3" />
    <text x="920" y="335" class="component">🔗 Link - Data connections</text>
    <rect x="830" y="350" width="180" height="25" fill="#e3f2fd" stroke="#1565c0" rx="3" />
    <text x="920" y="365" class="component">⚡ Trigger - Event handling</text>

    <!-- Configuration & Schema Layer -->
    <rect x="50" y="550" width="850" height="200" class="config" rx="10" />
    <text x="475" y="570" class="layer-title">Configuration &amp; Schema Layer</text>

    <!-- Configuration System -->
    <rect x="100" y="590" width="350" height="140" fill="white" stroke="#ef6c00" rx="5" />
    <text x="275" y="610" class="group-title">Configuration System</text>
    <rect x="110" y="630" width="160" height="40" fill="#fff3e0" stroke="#ef6c00" rx="3" />
    <text x="190" y="645" class="component">📄 YAML Configuration</text>
    <text x="190" y="660" class="component">Human-readable</text>
    <rect x="280" y="630" width="160" height="40" fill="#fff3e0" stroke="#ef6c00" rx="3" />
    <text x="360" y="645" class="component">🔧 Configuration Manager</text>
    <text x="360" y="660" class="component">Loading &amp; validation</text>
    <rect x="110" y="680" width="330" height="40" fill="#fff3e0" stroke="#ef6c00" rx="3" />
    <text x="275" y="695" class="component">🔑 Environment &amp; API Key Management</text>
    <text x="275" y="710" class="component">Secure configuration handling</text>

    <!-- Schema & Validation -->
    <rect x="480" y="590" width="400" height="140" fill="white" stroke="#ef6c00" rx="5" />
    <text x="680" y="610" class="group-title">Schema &amp; Validation</text>
    <rect x="490" y="630" width="120" height="40" fill="#fff3e0" stroke="#ef6c00" rx="3" />
    <text x="550" y="645" class="component">📋 Pydantic V2</text>
    <text x="550" y="660" class="component">Type safety</text>
    <rect x="620" y="630" width="120" height="40" fill="#fff3e0" stroke="#ef6c00" rx="3" />
    <text x="680" y="645" class="component">🏗️ Schema Generator</text>
    <text x="680" y="660" class="component">Dynamic generation</text>
    <rect x="750" y="630" width="120" height="40" fill="#fff3e0" stroke="#ef6c00" rx="3" />
    <text x="810" y="645" class="component">✅ Validator</text>
    <text x="810" y="660" class="component">Input validation</text>
    <rect x="490" y="680" width="380" height="40" fill="#fff3e0" stroke="#ef6c00" rx="3" />
    <text x="680" y="695" class="component">📊 JSON Schema Output &amp; Documentation</text>
    <text x="680" y="710" class="component">API documentation generation</text>

    <!-- Logging & Monitoring Layer -->
    <rect x="950" y="550" width="800" height="200" class="logging" rx="10" />
    <text x="1350" y="570" class="layer-title">Logging &amp; Monitoring Layer</text>

    <!-- Core Logging -->
    <rect x="1000" y="590" width="300" height="140" fill="white" stroke="#7b1fa2" rx="5" />
    <text x="1150" y="610" class="group-title">Core Logging</text>
    <rect x="1010" y="630" width="280" height="40" fill="#f3e5f5" stroke="#7b1fa2" rx="3" />
    <text x="1150" y="645" class="component">📝 NanoBrainLogger - Structured logging</text>
    <text x="1150" y="660" class="component">JSON formatting &amp; Rich metadata</text>
    <rect x="1010" y="680" width="280" height="40" fill="#f3e5f5" stroke="#7b1fa2" rx="3" />
    <text x="1150" y="695" class="component">🔧 Logging Configuration</text>
    <text x="1150" y="710" class="component">Mode selection &amp; Handler management</text>

    <!-- Specialized Logging -->
    <rect x="1320" y="590" width="400" height="140" fill="white" stroke="#7b1fa2" rx="5" />
    <text x="1520" y="610" class="group-title">Specialized Logging</text>
    <rect x="1330" y="630" width="180" height="40" fill="#f3e5f5" stroke="#7b1fa2" rx="3" />
    <text x="1420" y="645" class="component">📊 Data Unit Logging</text>
    <text x="1420" y="660" class="component">Operation tracking</text>
    <rect x="1520" y="630" width="190" height="40" fill="#f3e5f5" stroke="#7b1fa2" rx="3" />
    <text x="1615" y="645" class="component">🔇 Third-party Suppression</text>
    <text x="1615" y="660" class="component">Console filtering</text>
    <rect x="1330" y="680" width="380" height="40" fill="#f3e5f5" stroke="#7b1fa2" rx="3" />
    <text x="1520" y="695" class="component">📈 Performance Metrics &amp; Clean Output</text>
    <text x="1520" y="710" class="component">Monitoring &amp; debugging support</text>

    <!-- External Integration Layer -->
    <rect x="50" y="780" width="1700" height="200" class="external" rx="10" />
    <text x="900" y="800" class="layer-title">External Integration Layer</text>

    <!-- LLM Providers -->
    <rect x="100" y="820" width="400" height="140" fill="white" stroke="#c2185b" rx="5" />
    <text x="300" y="840" class="group-title">LLM Providers</text>
    <rect x="110" y="860" width="180" height="40" fill="#fce4ec" stroke="#c2185b" rx="3" />
    <text x="200" y="875" class="component">🧠 OpenAI</text>
    <text x="200" y="890" class="component">GPT models &amp; Chat completion</text>
    <rect x="300" y="860" width="180" height="40" fill="#fce4ec" stroke="#c2185b" rx="3" />
    <text x="390" y="875" class="component">🎭 Mock LLM</text>
    <text x="390" y="890" class="component">Testing &amp; Development</text>
    <rect x="110" y="910" width="370" height="40" fill="#fce4ec" stroke="#c2185b" rx="3" />
    <text x="295" y="925" class="component">🔌 API Integration &amp; Response Processing</text>
    <text x="295" y="940" class="component">Unified interface for multiple providers</text>

    <!-- HPC & Distributed Computing -->
    <rect x="520" y="820" width="600" height="140" fill="white" stroke="#c2185b" rx="5" />
    <text x="820" y="840" class="group-title">HPC &amp; Distributed Computing</text>
    <rect x="530" y="860" width="180" height="40" fill="#fce4ec" stroke="#c2185b" rx="3" />
    <text x="620" y="875" class="component">🌐 Parsl Framework</text>
    <text x="620" y="890" class="component">HPC execution</text>
    <rect x="720" y="860" width="180" height="40" fill="#fce4ec" stroke="#c2185b" rx="3" />
    <text x="810" y="875" class="component">💻 Local Provider</text>
    <text x="810" y="890" class="component">Single machine</text>
    <rect x="910" y="860" width="180" height="40" fill="#fce4ec" stroke="#c2185b" rx="3" />
    <text x="1000" y="875" class="component">🏢 Slurm Provider</text>
    <text x="1000" y="890" class="component">HPC clusters</text>
    <rect x="530" y="910" width="560" height="40" fill="#fce4ec" stroke="#c2185b" rx="3" />
    <text x="810" y="925" class="component">⚡ Resource Management &amp; Job Scheduling</text>
    <text x="810" y="940" class="component">Scalable distributed computing infrastructure</text>

    <!-- Testing & Quality Assurance -->
    <rect x="50" y="1010" width="1700" height="120" class="testing" rx="10" />
    <text x="900" y="1030" class="layer-title">Testing &amp; Quality Assurance</text>

    <rect x="100" y="1050" width="300" height="60" fill="white" stroke="#f57f17" rx="5" />
    <text x="250" y="1070" class="group-title">🧪 Unit Tests</text>
    <text x="250" y="1085" class="component">Component testing</text>
    <text x="250" y="1100" class="component">Isolated validation</text>

    <rect x="450" y="1050" width="300" height="60" fill="white" stroke="#f57f17" rx="5" />
    <text x="600" y="1070" class="group-title">🔬 Integration Tests</text>
    <text x="600" y="1085" class="component">End-to-end testing</text>
    <text x="600" y="1100" class="component">System validation</text>

    <rect x="800" y="1050" width="300" height="60" fill="white" stroke="#f57f17" rx="5" />
    <text x="950" y="1070" class="group-title">⚡ Performance Tests</text>
    <text x="950" y="1085" class="component">Load testing</text>
    <text x="950" y="1100" class="component">Scalability validation</text>

    <rect x="1150" y="1050" width="300" height="60" fill="white" stroke="#f57f17" rx="5" />
    <text x="1300" y="1070" class="group-title">🎭 Mock Support</text>
    <text x="1300" y="1085" class="component">Test isolation</text>
    <text x="1300" y="1100" class="component">Dependency mocking</text>

    <!-- Key Data Flow Arrows -->
    <line x1="200" y1="190" x2="190" y2="260" class="arrow" />
    <line x1="450" y1="190" x2="440" y2="260" class="arrow" />
    <line x1="700" y1="190" x2="700" y2="260" class="arrow" />

    <line x1="190" y1="380" x2="300" y2="380" class="arrow" />
    <line x1="580" y1="380" x2="600" y2="380" class="arrow" />
    <line x1="820" y1="380" x2="920" y2="380" class="arrow" />

    <line x1="475" y1="550" x2="475" y2="520" class="arrow" />
    <line x1="1350" y1="550" x2="1350" y2="520" class="arrow" />

    <line x1="300" y1="820" x2="190" y2="380" class="arrow" />
    <line x1="820" y1="820" x2="550" y2="380" class="arrow" />

    <!-- Status Summary -->
    <text x="900" y="1200" class="layer-title">🎯 Architecture Status: Production Ready</text>
    <text x="900" y="1230" class="component">✅ Modular design with clear separation of concerns</text>
    <text x="900" y="1250" class="component">✅ Comprehensive logging and monitoring capabilities</text>
    <text x="900" y="1270" class="component">✅ Scalable execution from local to HPC environments</text>
    <text x="900" y="1290" class="component">✅ Robust testing framework ensuring code quality</text>
    <text x="900" y="1310" class="component">✅ Future-proof with Pydantic V2 and modern Python practices</text>
</svg>